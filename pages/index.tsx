import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { fetchArticles, fetchCategories } from '../http';
import { IArticle, ICategory, ICollectionResponse, IQueryOptions } from '../types';
import { AxiosResponse } from 'axios';
import Tabs from '../components/Tabs';
import ArticleList from '../components/ArticleList';
import qs from "qs";
import { useRouter } from 'next/router';

interface IPropTypes {
  categories: {
    items: ICategory[];
  };
  articles: {
    items: IArticle[];
  }
}

const Home: NextPage<IPropTypes> = ({ categories, articles }) => {
  const router = useRouter();

  console.log('categories', categories)
  console.log('articles', articles)

  const handleOnSearch = (query: String) => {
    router.push(`/?search=${query}`)
  }

  return (
    <div>
      <Head>
        <title>Blog Homepage</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs categories={categories.items} handleOnSearch={handleOnSearch} />
      <ArticleList articles={articles.items} />
    </div>
  )
};





//SSR


export const getServerSideProps: GetServerSideProps = async ({ query }) => {

  //articles
  const options: Partial<IQueryOptions> = {

    populate: ['author.avatar'],
    sort: ['id:desc'],
  }

  if (query.search) {
    options.filters = {
      Title: {
        $containsi: query.search,
      }
    }
  }

  const queryString = qs.stringify(options)
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticles(queryString);

  //categories

  const {
    data: categories
  }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories();

  console.log('categories', categories)
  console.log('articles', articles)

  return {
    props: {
      categories: {
        items: categories.data
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination
      }
    }
  }
}

export default Home
